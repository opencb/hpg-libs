
import os
import sys

Import('hpg_c_env', 'hpg_cpp_env', 'compiler', 'debug')

#clean = 0
#for opt in sys.argv:
#  if opt == "-c":
#     clean = 1

third_party_c_objs = []
third_party_cpp_objs = []
hpg_c_env['CPPPATH'] += [os.getcwd()]
hpg_cpp_env['CPPPATH'] += [os.getcwd()]

# Compile argtable/ objects
argtableenv = hpg_c_env.Clone()
argtableenv['CFLAGS'] += ' -DHAVE_CONFIG_H -fPIC -DPIC'

third_party_c_objs += argtableenv.Object(Glob('argtable/*.c'))

# Compile config/ objects
configenv = hpg_c_env.Clone()
configenv['CFLAGS'] += ' -DHAVE_CONFIG_H -D_REENTRANT -Wall -Wshadow -Wextra -Wdeclaration-after-statement -Wno-unused-parameter'

third_party_c_objs += configenv.Object(Glob('config/*.c'))


# Compile jansson/ objects
janssonenv = hpg_c_env.Clone()
janssonenv['CFLAGS'] +=  ' -DHAVE_CONFIG_H -Wall -Wextra -Wdeclaration-after-statement -fPIC -DPIC'
janssonenv['CPPPATH'] += [os.getcwd() + '/jansson']
hpg_c_env['CPPPATH'] += [os.getcwd() + '/jansson/']

third_party_c_objs += janssonenv.Object(Glob('jansson/*.c'))

# Compile sqlite/ objects
sqliteenv = hpg_c_env.Clone()
sqliteenv['CFLAGS'] += ' -DHAVE_CONFIG_H -fPIC -DPIC'

third_party_c_objs += sqliteenv.Object(Glob('sqlite/*.c'))
third_party_cpp_objs += sqliteenv.Object(Glob('sqlite/*.c'))


# Compile cprops/ objects but ONLY those used for our libraries
cpropsenv = hpg_c_env.Clone()
cpropsenv['CFLAGS'] += ' -D_REENTRANT -D_GNU_SOURCE -DHAVE_CONFIG_H '

third_party_c_objs += cpropsenv.Object(['cprops/avl.c', 'cprops/collection.c', 'cprops/hashlist.c', 'cprops/hashtable.c', 'cprops/heap.c', 'cprops/linked_list.c', 'cprops/log.c', 'cprops/mempool.c', 'cprops/rb.c', 'cprops/util.c', 'cprops/vector.c', 'cprops/trie.c', 'cprops/mtab.c'])


# we don't compile samtools and hts ourselves, delegate in their makefiles
# that generate samtools/libbam.a and htslib/libhts.a
#if clean:
#   os.system("cd htslib/ && make clean && cd ../samtools/ && make clean")
#else:
#   os.system("cd .. && git submodule init && git submodule update && cd third_party/htslib/ && git checkout master && make && cd ../samtools/ && git checkout master && make && cd ../")

samtoolsenv = hpg_c_env.Clone()
if debug == 1:
   samtoolsenv['CFLAGS'] = ' -g -Wall '
else:
   samtoolsenv['CFLAGS'] = ' -g -Wall -O2 '
samtoolsenv['CPPPATH'] += [os.getcwd() + '/htslib']
hpg_c_env['CPPPATH'] += [os.getcwd() + '/htslib/']

third_party_c_objs += samtoolsenv.Object(['htslib/sam.c', 'htslib/hfile.c', 'htslib/bgzf.c',         \
		      			  'htslib/kfunc.c', 'htslib/knetfile.c', 'htslib/kstring.c', \
					  'htslib/bgzf.c', 'htslib/faidx.c', 'htslib/hfile.c',       \
					  'htslib/hfile_net.c', 'htslib/hts.c', 'htslib/md5.c',      \
					  'htslib/regidx.c', 'htslib/synced_bcf_reader.c',           \
					  'htslib/vcf_sweep.c', 'htslib/tbx.c', 'htslib/vcf.c',      \
					  'htslib/cram/cram_external.c', 'htslib/cram/cram_index.c', \
					  'htslib/vcfutils.c', 'htslib/cram/cram_codecs.c',          \
					  'htslib/cram/cram_decode.c', 'htslib/cram/cram_encode.c',  \
					  'htslib/cram/cram_io.c', 'htslib/cram/cram_samtools.c',    \
					  'htslib/cram/cram_stats.c', 'htslib/cram/files.c',         \
					  'htslib/cram/mFILE.c', 'htslib/cram/open_trace_file.c',    \
					  'htslib/cram/pooled_alloc.c', 'htslib/cram/rANS_static.c', \
					  'htslib/cram/sam_header.c', 'htslib/cram/string_alloc.c',  \
					  'htslib/cram/thread_pool.c', 'htslib/cram/vlen.c',         \
					  'htslib/cram/zfio.c',                                      \
					  'samtools/bam.c', 'samtools/sam_opts.c', 'samtools/bam_sort.c'])

# return all objects
hpg_c_env['objects'] += third_party_c_objs
hpg_cpp_env['objects'] += third_party_cpp_objs
